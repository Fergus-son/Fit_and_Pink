import React, { useEffect, useState } from "react";
import {
  Section,
} from "../styles/shared";
import {
  Avatar,
  ProfileHeader,
  ProfileName,
  ProfileSub,
  InfoTitle,
  InfoRow,
  InfoLabel,
  InfoValue,
  NormBox,
  NormLabel,
  NormValue,
  EditButton,
  OfferButton,
  PoweredText,
  SkeletonLine,
  SkeletonAvatar
} from "../styles/profile";
import { getEffectiveUserId, getUserId, tg } from "../telegram";

interface UserData {
  firstName: string;
  lastName: string;
  subscriptionExpiry: string;
  birthDate: string;
  gender: string;
  goal: string;
  activityLevel: string;
  currentWeight: number;
  desiredWeight: number;
  height: number;
}

const ProfileTab: React.FC = () => {
  const [userData, setUserData] = useState<UserData | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editedData, setEditedData] = useState<UserData | null>(null);

  useEffect(() => {
    const fetchUserData = async () => {
      const userId = getEffectiveUserId();
      const response = await fetch(`/api/user?userId=${userId}`);
      const data = await response.json();
      setUserData(data);
      setEditedData(data);
    };

    fetchUserData();
  }, []);

  const formatDate = (dateString: string) => {
    if (!dateString) return "‚Äî";
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' });
  };

  const handleOfferClick = () => {
    window.open("https://natarelke.io/oferta.pdf", "_blank");
  };

  const handleEditClick = () => {
    setIsEditing(true);
  };

const handleSaveClick = async () => {
  if (!editedData) return;

  try {
    const userId = getEffectiveUserId();
    const response = await fetch(`/api/user/update`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ userId, ...editedData }),
    });

    if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");

    // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    setUserData(editedData); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    setIsEditing(false);
    
    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö:
    // const updatedData = await response.json();
    // setUserData(updatedData);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞:", error);
  }
};

  const handleCancelClick = () => {
    setIsEditing(false);
    setEditedData(userData);
  };

  const handleChange = (field: keyof UserData, value: string | number) => {
    if (!editedData) return;
    setEditedData({
      ...editedData,
      [field]: value,
    });
  };

  return (
    <Section>
      <ProfileHeader>
        {userData ? <Avatar /> : <SkeletonAvatar />}

        <div className="flex-1 min-w-0">
          {userData ? (
            <>
              <ProfileName>{userData.firstName} {userData.lastName}</ProfileName>
              <ProfileSub>–ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî –¥–æ {formatDate(userData.subscriptionExpiry)}</ProfileSub>
            </>
          ) : (
            <>
              {/* <SkeletonLine width="70%" />
              <SkeletonLine width="50%" /> */}
            </>
          )}
        </div>
      </ProfileHeader>

      <InfoTitle>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</InfoTitle>

      <InfoRow>
        <InfoLabel>üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</InfoLabel>
        {userData ? (
          isEditing ? (
            <input
              type="date"
              value={editedData?.birthDate || ""}
              onChange={(e) => handleChange("birthDate", e.target.value)}
            />
          ) : (
            <InfoValue>{formatDate(userData.birthDate)}</InfoValue>
          )
        ) : (
          <SkeletonLine width="50%" />
        )}
      </InfoRow>

      <InfoRow>
        <InfoLabel>‚ößÔ∏è –ü–æ–ª</InfoLabel>
        {userData ? (
          isEditing ? (
            <select
              value={editedData?.gender || ""}
              onChange={(e) => handleChange("gender", e.target.value)}
            >
              <option value="–ú—É–∂—Å–∫–æ–π">–ú—É–∂—Å–∫–æ–π</option>
              <option value="–ñ–µ–Ω—Å–∫–∏–π">–ñ–µ–Ω—Å–∫–∏–π</option>
            </select>
          ) : (
            <InfoValue>{userData.gender}</InfoValue>
          )
        ) : (
          <SkeletonLine width="50%" />
        )}
      </InfoRow>

      <InfoRow>
        <InfoLabel>üéØ –¶–µ–ª—å</InfoLabel>
        {userData ? (
          isEditing ? (
            <select
              value={editedData?.goal || ""}
              onChange={(e) => handleChange("goal", e.target.value)}
            >
              <option value="–ü–æ—Ö—É–¥–µ–Ω–∏–µ">–ü–æ—Ö—É–¥–µ–Ω–∏–µ</option>
              <option value="–ù–∞–±–æ—Ä –º–∞—Å—Å—ã">–ù–∞–±–æ—Ä –º–∞—Å—Å—ã</option>
              <option value="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞">–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞</option>
            </select>
          ) : (
            <InfoValue>{userData.goal}</InfoValue>
          )
        ) : (
          <SkeletonLine width="50%" />
        )}
      </InfoRow>

      <InfoRow>
        <InfoLabel>üèÉ‚Äç‚ôÇÔ∏è –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</InfoLabel>
        {userData ? (
          isEditing ? (
            <select
              value={editedData?.activityLevel || ""}
              onChange={(e) => handleChange("activityLevel", e.target.value)}
            >
              <option value="–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏">–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏</option>
              <option value="–õ—ë–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å">–õ—ë–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
              <option value="–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å">–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
              <option value="–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å">–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
              <option value="–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å">–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
            </select>
          ) : (
            <InfoValue>{userData.activityLevel}</InfoValue>
          )
        ) : (
          <SkeletonLine width="50%" />
        )}
      </InfoRow>

      <InfoRow>
        <InfoLabel>‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å</InfoLabel>
        {userData ? (
          isEditing ? (
            <input
              type="number"
              value={editedData?.currentWeight || ""}
              onChange={(e) => handleChange("currentWeight", parseFloat(e.target.value))}
            />
          ) : (
            <InfoValue>{userData.currentWeight} –∫–≥</InfoValue>
          )
        ) : (
          <SkeletonLine width="50%" />
        )}
      </InfoRow>

      <InfoRow>
        <InfoLabel>ü•á –ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å</InfoLabel>
        {userData ? (
          isEditing ? (
            <input
              type="number"
              value={editedData?.desiredWeight || ""}
              onChange={(e) => handleChange("desiredWeight", parseFloat(e.target.value))}
            />
          ) : (
            <InfoValue>{userData.desiredWeight} –∫–≥</InfoValue>
          )
        ) : (
          <SkeletonLine width="50%" />
        )}
      </InfoRow>

      <InfoRow>
        <InfoLabel>üìè –†–æ—Å—Ç</InfoLabel>
        {userData ? (
          isEditing ? (
            <input
              type="number"
              value={editedData?.height || ""}
              onChange={(e) => handleChange("height", parseFloat(e.target.value))}
            />
          ) : (
            <InfoValue>{userData.height} —Å–º</InfoValue>
          )
        ) : (
          <SkeletonLine width="50%" />
        )}
      </InfoRow>

      {userData && (
        <>
          {isEditing ? (
            <>
              <EditButton onClick={handleSaveClick}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</EditButton>
              <EditButton onClick={handleCancelClick}>–û—Ç–º–µ–Ω–∞</EditButton>
            </>
          ) : (
            <EditButton onClick={handleEditClick}>–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</EditButton>
          )}
          <OfferButton onClick={handleOfferClick}>–û—Ñ–µ—Ä—Ç–∞</OfferButton>
          <PoweredText>Powered by Fit&Pink</PoweredText>
        </>
      )}
    </Section>
  );
};

export default ProfileTab;