import React, { useEffect, useState } from "react";
import {
  ProfileHeader,
  Avatar,
  ProfileName,
  ProfileSub,
  InfoCard,
  InfoRow,
  InfoLabel,
  InfoValue,
  NormCard,
  NormLabel,
  NormValue,
  PrimaryButton,
  SecondaryButton,
  FooterText,
  SkeletonAvatar,
} from "../styles/profile";
import { getEffectiveUserId } from "../telegram";
import { SkeletonLine } from "../styles/shared";

interface UserData {
  firstName: string;
  lastName: string;
  subscriptionExpiry: string;
  birthDate: string;
  gender: string;
  goal: string;
  activityLevel: string;
  currentWeight: number;
  desiredWeight: number;
  height: number;
  dailyNorm?: number;
}

const ProfileTab: React.FC = () => {
  const [userData, setUserData] = useState<UserData | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editedData, setEditedData] = useState<UserData | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchUserData = async () => {
      const userId = getEffectiveUserId();
      try {
        setIsLoading(true);
        const response = await fetch(`/api/user?userId=${userId}`);
        const data = await response.json();
        setUserData(data);
        setEditedData(data);
      } catch (error) {
        console.error("Failed to fetch user data:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchUserData();
  }, []);

  const formatDate = (dateString: string) => {
    if (!dateString) return "‚Äî";
    const date = new Date(dateString);
    return date.toLocaleDateString("ru-RU", {
      day: "numeric",
      month: "long",
      year: "numeric",
    });
  };

  const handleOfferClick = () => {
    window.open("https://natarelke.io/oferta.pdf", "_blank");
  };

  const handleEditClick = () => {
    setIsEditing(true);
  };

  const handleSaveClick = async () => {
    if (!editedData) return;

    try {
      const userId = getEffectiveUserId();
      const response = await fetch(`/api/user/update`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId, ...editedData }),
      });

      if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");

      setUserData(editedData);
      setIsEditing(false);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞:", error);
    }
  };

  const handleCancelClick = () => {
    setIsEditing(false);
    setEditedData(userData);
  };

  const handleChange = (field: keyof UserData, value: string | number) => {
    if (!editedData) return;
    setEditedData({
      ...editedData,
      [field]: value,
    });
  };

  if (isLoading) {
    return (
      <>
        <ProfileHeader>
          <SkeletonAvatar />
          <div style={{ width: "100%", textAlign: "center" }}>
            <SkeletonLine width="60%" height="1.5rem" style={{ margin: "0 auto 8px" }} />
            <SkeletonLine width="40%" height="1rem" style={{ margin: "0 auto" }} />
          </div>
        </ProfileHeader>
        {[...Array(7)].map((_, i) => (
          <div key={i} style={{ marginBottom: "16px" }}>
            <SkeletonLine width="100%" height="1rem" />
          </div>
        ))}
      </>
    );
  }

  if (!userData) {
    return <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è</div>;
  }

  return (
    <>
      <ProfileHeader>
        <Avatar>
          {userData.firstName?.[0]}
          {userData.lastName?.[0]}
        </Avatar>
        <ProfileName>
          {userData.firstName} {userData.lastName}
        </ProfileName>
        <ProfileSub>
          –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {formatDate(userData.subscriptionExpiry)}
        </ProfileSub>
      </ProfileHeader>

      <InfoCard>
        <InfoRow>
          <InfoLabel>üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</InfoLabel>
          {isEditing ? (
            <input
              type="date"
              value={editedData?.birthDate || ""}
              onChange={(e) => handleChange("birthDate", e.target.value)}
              style={{
                border: "1px solid #F2F2F7",
                borderRadius: "8px",
                padding: "4px 8px",
              }}
            />
          ) : (
            <InfoValue>{formatDate(userData.birthDate)}</InfoValue>
          )}
        </InfoRow>

        <InfoRow>
          <InfoLabel>‚ößÔ∏è –ü–æ–ª</InfoLabel>
          {isEditing ? (
            <select
              value={editedData?.gender || ""}
              onChange={(e) => handleChange("gender", e.target.value)}
              style={{
                border: "1px solid #F2F2F7",
                borderRadius: "8px",
                padding: "4px 8px",
              }}
            >
              <option value="–ú—É–∂—Å–∫–æ–π">–ú—É–∂—Å–∫–æ–π</option>
              <option value="–ñ–µ–Ω—Å–∫–∏–π">–ñ–µ–Ω—Å–∫–∏–π</option>
            </select>
          ) : (
            <InfoValue>{userData.gender}</InfoValue>
          )}
        </InfoRow>

        <InfoRow>
          <InfoLabel>üéØ –¶–µ–ª—å</InfoLabel>
          {isEditing ? (
            <select
              value={editedData?.goal || ""}
              onChange={(e) => handleChange("goal", e.target.value)}
              style={{
                border: "1px solid #F2F2F7",
                borderRadius: "8px",
                padding: "4px 8px",
              }}
            >
              <option value="–ü–æ—Ö—É–¥–µ–Ω–∏–µ">–ü–æ—Ö—É–¥–µ–Ω–∏–µ</option>
              <option value="–ù–∞–±–æ—Ä –º–∞—Å—Å—ã">–ù–∞–±–æ—Ä –º–∞—Å—Å—ã</option>
              <option value="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞">–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞</option>
            </select>
          ) : (
            <InfoValue>{userData.goal}</InfoValue>
          )}
        </InfoRow>

        <InfoRow>
          <InfoLabel>üèÉ‚Äç‚ôÇÔ∏è –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</InfoLabel>
          {isEditing ? (
            <select
              value={editedData?.activityLevel || ""}
              onChange={(e) => handleChange("activityLevel", e.target.value)}
              style={{
                border: "1px solid #F2F2F7",
                borderRadius: "8px",
                padding: "4px 8px",
              }}
            >
              <option value="–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏">–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏</option>
              <option value="–õ—ë–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å">–õ—ë–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
              <option value="–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å">–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
              <option value="–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å">–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
              <option value="–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å">
                –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
              </option>
            </select>
          ) : (
            <InfoValue>{userData.activityLevel}</InfoValue>
          )}
        </InfoRow>

        <InfoRow>
          <InfoLabel>‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å</InfoLabel>
          {isEditing ? (
            <input
              type="number"
              value={editedData?.currentWeight || ""}
              onChange={(e) =>
                handleChange("currentWeight", parseFloat(e.target.value))
              }
              style={{
                border: "1px solid #F2F2F7",
                borderRadius: "8px",
                padding: "4px 8px",
                width: "80px",
                textAlign: "right",
              }}
            />
          ) : (
            <InfoValue>{userData.currentWeight} –∫–≥</InfoValue>
          )}
        </InfoRow>

        <InfoRow>
          <InfoLabel>ü•á –ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å</InfoLabel>
          {isEditing ? (
            <input
              type="number"
              value={editedData?.desiredWeight || ""}
              onChange={(e) =>
                handleChange("desiredWeight", parseFloat(e.target.value))
              }
              style={{
                border: "1px solid #F2F2F7",
                borderRadius: "8px",
                padding: "4px 8px",
                width: "80px",
                textAlign: "right",
              }}
            />
          ) : (
            <InfoValue>{userData.desiredWeight} –∫–≥</InfoValue>
          )}
        </InfoRow>

        <InfoRow>
          <InfoLabel>üìè –†–æ—Å—Ç</InfoLabel>
          {isEditing ? (
            <input
              type="number"
              value={editedData?.height || ""}
              onChange={(e) => handleChange("height", parseFloat(e.target.value))}
              style={{
                border: "1px solid #F2F2F7",
                borderRadius: "8px",
                padding: "4px 8px",
                width: "80px",
                textAlign: "right",
              }}
            />
          ) : (
            <InfoValue>{userData.height} —Å–º</InfoValue>
          )}
        </InfoRow>
      </InfoCard>

      <NormCard>
        <NormLabel>–¢–≤–æ—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞</NormLabel>
        <NormValue>{userData.dailyNorm || 2000} –∫–∫–∞–ª</NormValue>
      </NormCard>

      {isEditing ? (
        <>
          <PrimaryButton onClick={handleSaveClick}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</PrimaryButton>
          <SecondaryButton onClick={handleCancelClick}>
            –û—Ç–º–µ–Ω–∞
          </SecondaryButton>
        </>
      ) : (
        <>
          <PrimaryButton onClick={handleEditClick}>
            –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
          </PrimaryButton>
          <SecondaryButton onClick={handleOfferClick}>
            –û—Ñ–µ—Ä—Ç–∞
          </SecondaryButton>
        </>
      )}

      <FooterText>Powered by Fit&Pink</FooterText>
    </>
  );
};

export default ProfileTab;